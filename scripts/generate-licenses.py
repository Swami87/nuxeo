#!/usr/bin/env python
"""
(C) Copyright 2017 Nuxeo (http://nuxeo.com/) and others.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Contributors:
    Florent Guillaume

This script generates an aggregate of the licenses used by the third-party libraries.
The output is stored in file:
- target/generated-sources/license/THIRD-PARTY.md

It needs some files to have been generated by previous maven stages:
- mvn -nsu -Paddons,distrib,release,-qa license:aggregate-add-third-party
  - target/generated-sources/license/THIRD-PARTY.txt
- mvn install
  - nuxeo-distribution/nuxeo-nxr-jsf-ui/target/dependency-tree.log

It uses a list of manually-collected unknown licenses available in file:
- scripts/unknown-licenses.txt

It also uses a list of detailed project name + home page for some projects, in file:
- scripts/licenses-infos.txt

Usage:
$ ./scripts/generate-licenses.py
"""
import os
import re

UNKNOWN = 'unknown-licenses.txt'
INFOS = 'licenses-infos.txt'
TP = '../target/generated-sources/license/THIRD-PARTY.txt'
TP_MD = '../target/generated-sources/license/THIRD-PARTY.md'
DEPTREE = '../nuxeo-distribution/nuxeo-nxr-jsf-ui/target/dependency-tree.log'

ARTIFACT_GROUP = {}

def chdir_scripts():
    dir = os.path.dirname(os.path.realpath(__file__))
    os.chdir(dir)

def parse_licenses(filename):
    licenses = {}
    versions = {}
    with open(filename) as f:
        for line in f:
            line = line.strip(' \n')
            if line == '':
                continue
            if line.startswith('#'):
                continue
            if line.startswith('Lists of'):
                continue
            # multi-licenses (EPL 1.0 + MPL 2.0) -> (EPL 1.0) (MPL 2.0)
            line = line.replace(' + ', ') (')
            # (AL 1.1) (BSD 4) (Public Domain) MXP1: Xml Pull Parser 3rd Edition (XPP3) (xpp3:xpp3:1.1.4c - http://www.extreme.indiana.edu/xgws/xsoap/xpp/mxp1/)
            m = re.match('((\([^)]+\) )+)(.+) \(([^ :]+):([^ :]+):([^ :]+) - .+\)', line)
            if m is None:
                #print('XXX ' + line)
                continue
            license_list = [l.strip('() ') for l in m.group(1).split(') (')]
            name = m.group(3)
            group = m.group(4)
            artifact = m.group(5)
            version = m.group(6)
            ga = group + ':' + artifact
            if group == 'nuxeo-studio':
                continue
            licenses[ga] = license_list
            versions[ga] = version
            ARTIFACT_GROUP[artifact] = group
            #print(license_list, name, group, artifact, version)
    return licenses, versions

def fix_unknown(licenses, add_licenses):
    for ga, license_list in licenses.iteritems():
        if license_list == ['Unknown license']:
            if ga in add_licenses:
                licenses[ga] = add_licenses[ga]

def read_infos():
    infos = {}
    with open(INFOS) as f:
        for line in f:
            line = line.strip('\n|')
            if line.startswith('#'):
                continue
            ga, info = line.split('|')
            infos[ga] = info
    return infos

def read_jars():
    jars = set()
    with open(DEPTREE) as f:
        for line in f:
            line = line.strip('\n')
            line = line.replace('|-- ', '')
            line = line.strip(' ')
            line = re.sub(' \(.*\)', '', line)
            # net.sf.json-lib:json-lib:2.4:jar:jdk15:compile
            group, artifact, version, packaging, classifier, scope = line.split(':')
            if scope != 'compile':
                continue
            if packaging != 'jar':
                continue
            ga = group + ':' + artifact
            jars.add(ga)
    return jars

def dump(licenses, versions, infos, jars, out):
    done = set()
    lines = []
    for ga, license_list in licenses.iteritems():
        group, artifact = ga.split(':')
        version = versions[ga]
        jar = artifact + '-' + version + '.jar'
        info = infos.get(ga, ' ')
        if ga in jars:
             done.add(ga)
             lines.append('| ' + jar + ' | ' + info + ' | ' + version + ' | ' + ', '.join(license_list) + ' |')
    for line in sorted(lines, key=str.lower):
        out.write(line + '\n')

def main():
    chdir_scripts()
    licenses, versions = parse_licenses(TP)
    add_licenses, add_versions = parse_licenses(UNKNOWN)
    fix_unknown(licenses, add_licenses)
    infos = read_infos()
    jars = read_jars()
    with open(TP_MD, 'w') as out:
        dump(licenses, versions, infos, jars, out)

if __name__ == '__main__':
    main()

